<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lulu-blog</title>
  
  <subtitle>lulu</subtitle>
  <link href="https://luluminusone.github.io/atom.xml" rel="self"/>
  
  <link href="https://luluminusone.github.io/"/>
  <updated>2022-07-21T08:51:28.615Z</updated>
  <id>https://luluminusone.github.io/</id>
  
  <author>
    <name>lulu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用指令</title>
    <link href="https://luluminusone.github.io/2022/07/21/git-command/"/>
    <id>https://luluminusone.github.io/2022/07/21/git-command/</id>
    <published>2022-07-21T07:48:38.109Z</published>
    <updated>2022-07-21T08:51:28.615Z</updated>
    
    <content type="html"><![CDATA[<p>用于记录git常用的指令</p><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><h2 id="使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息"><a href="#使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息" class="headerlink" title="使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息"></a>使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure><blockquote><p><font color="black">这个方法可以用来修改上次commit的备注信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend </span><br></pre></td></tr></table></figure><p>进入编辑模式，可将需要修改commit的记录的pick修改成edit，编辑好之后使用:wq保存退出。<br>然后使用以下命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>进入编辑模式编辑commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h2 id="列出所有本地分支和远程分支"><a href="#列出所有本地分支和远程分支" class="headerlink" title="列出所有本地分支和远程分支"></a>列出所有本地分支和远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，但依然停留在当前分支"><a href="#新建一个分支，但依然停留在当前分支" class="headerlink" title="新建一个分支，但依然停留在当前分支"></a>新建一个分支，但依然停留在当前分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [branch-name]</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，指向指定commit"><a href="#新建一个分支，指向指定commit" class="headerlink" title="新建一个分支，指向指定commit"></a>新建一个分支，指向指定commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [branch] [commit]</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，与指定的远程分支建立追踪关系"><a href="#新建一个分支，与指定的远程分支建立追踪关系" class="headerlink" title="新建一个分支，与指定的远程分支建立追踪关系"></a>新建一个分支，与指定的远程分支建立追踪关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure><h2 id="选择一个commit，合并进当前分支"><a href="#选择一个commit，合并进当前分支" class="headerlink" title="选择一个commit，合并进当前分支"></a>选择一个commit，合并进当前分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick [commit]</span><br></pre></td></tr></table></figure><h2 id="删除分支-删除本地分支"><a href="#删除分支-删除本地分支" class="headerlink" title="删除分支(删除本地分支)"></a>删除分支(删除本地分支)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line"></span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h2 id="新建一个tag在当前commit"><a href="#新建一个tag在当前commit" class="headerlink" title="新建一个tag在当前commit"></a>新建一个tag在当前commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag [tag]</span><br></pre></td></tr></table></figure><h2 id="新建一个tag在指定commit"><a href="#新建一个tag在指定commit" class="headerlink" title="新建一个tag在指定commit"></a>新建一个tag在指定commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure><h2 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d [tag]</span><br></pre></td></tr></table></figure><h2 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/[tagName]</span><br></pre></td></tr></table></figure><h2 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看tag信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show [tag]</span><br></pre></td></tr></table></figure><h2 id="提交指定tag"><a href="#提交指定tag" class="headerlink" title="提交指定tag"></a>提交指定tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] [tag]</span><br></pre></td></tr></table></figure><h2 id="提交所有tag"><a href="#提交所有tag" class="headerlink" title="提交所有tag"></a>提交所有tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] --tags</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，指向某个tag"><a href="#新建一个分支，指向某个tag" class="headerlink" title="新建一个分支，指向某个tag"></a>新建一个分支，指向某个tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><h2 id="显示commit历史，以及每次commit发生变更的文件"><a href="#显示commit历史，以及每次commit发生变更的文件" class="headerlink" title="显示commit历史，以及每次commit发生变更的文件"></a>显示commit历史，以及每次commit发生变更的文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br></pre></td></tr></table></figure><h2 id="搜索提交历史，根据关键词"><a href="#搜索提交历史，根据关键词" class="headerlink" title="搜索提交历史，根据关键词"></a>搜索提交历史，根据关键词</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -S [keyword]</span><br></pre></td></tr></table></figure><h2 id="显示所有提交过的用户，按提交次数排序"><a href="#显示所有提交过的用户，按提交次数排序" class="headerlink" title="显示所有提交过的用户，按提交次数排序"></a>显示所有提交过的用户，按提交次数排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git shortlog -sn</span><br></pre></td></tr></table></figure><h2 id="显示暂存区和工作区的差异"><a href="#显示暂存区和工作区的差异" class="headerlink" title="显示暂存区和工作区的差异"></a>显示暂存区和工作区的差异</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h2 id="显示暂存区和上一个commit的差异"><a href="#显示暂存区和上一个commit的差异" class="headerlink" title="显示暂存区和上一个commit的差异"></a>显示暂存区和上一个commit的差异</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached [file]</span><br></pre></td></tr></table></figure><h2 id="显示工作区与当前分支最新commit之间的差异"><a href="#显示工作区与当前分支最新commit之间的差异" class="headerlink" title="显示工作区与当前分支最新commit之间的差异"></a>显示工作区与当前分支最新commit之间的差异</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><h2 id="下载远程仓库的所有变动"><a href="#下载远程仓库的所有变动" class="headerlink" title="下载远程仓库的所有变动"></a>下载远程仓库的所有变动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote]</span><br></pre></td></tr></table></figure><h2 id="推送所有分支到远程仓库"><a href="#推送所有分支到远程仓库" class="headerlink" title="推送所有分支到远程仓库"></a>推送所有分支到远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><h2 id="恢复暂存区的指定文件到工作区"><a href="#恢复暂存区的指定文件到工作区" class="headerlink" title="恢复暂存区的指定文件到工作区"></a>恢复暂存区的指定文件到工作区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [file]</span><br></pre></td></tr></table></figure><h2 id="恢复某个commit的指定文件到暂存区和工作区"><a href="#恢复某个commit的指定文件到暂存区和工作区" class="headerlink" title="恢复某个commit的指定文件到暂存区和工作区"></a>恢复某个commit的指定文件到暂存区和工作区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [commit] [file]</span><br></pre></td></tr></table></figure><h2 id="恢复暂存区的所有文件到工作区"><a href="#恢复暂存区的所有文件到工作区" class="headerlink" title="恢复暂存区的所有文件到工作区"></a>恢复暂存区的所有文件到工作区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout</span><br></pre></td></tr></table></figure><h2 id="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"><a href="#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变" class="headerlink" title="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [file]</span><br></pre></td></tr></table></figure><h2 id="重置暂存区与工作区，与上一次commit保持一致"><a href="#重置暂存区与工作区，与上一次commit保持一致" class="headerlink" title="重置暂存区与工作区，与上一次commit保持一致"></a>重置暂存区与工作区，与上一次commit保持一致</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><h2 id="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"><a href="#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变" class="headerlink" title="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [commit]</span><br></pre></td></tr></table></figure><h2 id="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"><a href="#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致" class="headerlink" title="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard [commit]</span><br></pre></td></tr></table></figure><h2 id="重置当前HEAD为指定commit，但保持暂存区和工作区不变"><a href="#重置当前HEAD为指定commit，但保持暂存区和工作区不变" class="headerlink" title="重置当前HEAD为指定commit，但保持暂存区和工作区不变"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --keep [commit]</span><br></pre></td></tr></table></figure><h2 id="新建一个commit，用来撤销指定commit"><a href="#新建一个commit，用来撤销指定commit" class="headerlink" title="新建一个commit，用来撤销指定commit"></a>新建一个commit，用来撤销指定commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ $ git revert [commit]</span><br></pre></td></tr></table></figure><h2 id="暂时将未提交的变化移除，稍后再移入"><a href="#暂时将未提交的变化移除，稍后再移入" class="headerlink" title="暂时将未提交的变化移除，稍后再移入"></a>暂时将未提交的变化移除，稍后再移入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h2 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用于记录git常用的指令&lt;/p&gt;
&lt;h2 id=&quot;代码提交&quot;&gt;&lt;a href=&quot;#代码提交&quot; class=&quot;headerlink&quot; title=&quot;代码提交&quot;&gt;&lt;/a&gt;代码提交&lt;/h2&gt;&lt;h2 id=&quot;使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>前端入门之路</title>
    <link href="https://luluminusone.github.io/2022/07/21/Web-Software-Engineer-begin/"/>
    <id>https://luluminusone.github.io/2022/07/21/Web-Software-Engineer-begin/</id>
    <published>2022-07-21T02:19:06.355Z</published>
    <updated>2022-07-21T06:37:41.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="html-超文本标记语言"><a href="#html-超文本标记语言" class="headerlink" title="html(超文本标记语言)"></a>html(超文本标记语言)</h2><p>菜鸟教程: <a href="https://www.runoob.com/html/html-tutorial.html">https://www.runoob.com/html/html-tutorial.html</a><br>MDN教程: <a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started">https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started</a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>css基础语法: <a href="https://www.w3school.com.cn/css/css_syntax.asp">w3c css 基础语法</a><br>css进阶语法-scss: <a href="http://www.sass.hk/">http://www.sass.hk/</a></p><h2 id="JS-javascript"><a href="#JS-javascript" class="headerlink" title="JS(javascript)"></a>JS(javascript)</h2><p>ES5基础语法: <a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a><br>ES6基础语法: <a href="https://es6.ruanyifeng.com/">阮一峰ES6教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">熟悉ES5再学习</span><br></pre></td></tr></table></figure><p>js进阶语法-typescript: <a href="https://www.tslang.cn/docs/home.html">https://www.tslang.cn/docs/home.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">熟悉ES6基础再作研究</span><br></pre></td></tr></table></figure><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p>vuejs(2.x): <a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a><br>vuejs(3.x): <a href="https://v3.cn.vuejs.org/guide/introduction.html">https://v3.cn.vuejs.org/guide/introduction.html</a><br>vue-router: vue路由管理工具 <a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a><br>vue脚手架工具: <a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a> 用这个工具可以直接创建vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue脚手架已经集成了wepack、less、scss、vue-router、vuex等依赖包，前期用</span><br><span class="line">vue-cli创建项目即可开发，开箱即用，等熟悉了再一一研究以上开发工具</span><br></pre></td></tr></table></figure><h2 id="前端工程开发"><a href="#前端工程开发" class="headerlink" title="前端工程开发"></a>前端工程开发</h2><h3 id="依赖包管理"><a href="#依赖包管理" class="headerlink" title="依赖包管理"></a>依赖包管理</h3><p>npm前端开发依赖包管理工具: <a href="https://www.npmjs.cn/">https://www.npmjs.cn/</a><br>node.js下载网址: <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h2 id="项目打包工具"><a href="#项目打包工具" class="headerlink" title="项目打包工具"></a>项目打包工具</h2><p>webpack <a href="https://webpack.docschina.org/concepts/">https://webpack.docschina.org/concepts/</a> 前期用vue脚手架开发项目即可，熟悉用法后再深入研究</p><h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><p>git，廖雪峰教程: <a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>github代码仓库: <a href="https://github.com/">https://github.com/</a><br>gitee代码仓库（码云）: <a href="https://gitee.com/">https://gitee.com/</a></p><h2 id="以上为学习资料"><a href="#以上为学习资料" class="headerlink" title="以上为学习资料"></a>以上为学习资料</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;h2 id=&quot;html-超文本标记语言&quot;&gt;&lt;a href=&quot;#html-超文本标记语言&quot; class=&quot;headerlink&quot; title=&quot;h</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用Hexo和GitHub Page搭建个人blog</title>
    <link href="https://luluminusone.github.io/2022/07/20/how-to-create-blog/"/>
    <id>https://luluminusone.github.io/2022/07/20/how-to-create-blog/</id>
    <published>2022-07-20T02:23:21.071Z</published>
    <updated>2022-07-21T06:37:06.999Z</updated>
    
    <content type="html"><![CDATA[<p>其实写这篇文章缘由是在于对想搭建博客的兄弟姐妹们的一个保姆级教程，hexo是一个容易上手，零成本，搭建操作较简单的工具。</p><p>用hexo来搭博客是使用markdown文件来解析，json进行数据存储，不需要数据库去存储数据，文档比较完善，其官方插件较多，可以满足大部分需求，开发过程较轻松，坑不多，建议用hexo来搭博客，今天就把用hexo搭博客的教程呈上，大家一起来动手吧！</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先你需要安装好Node，hexo需要用到Node的NPM工具，如果没有安装过Node.js的可以去<a href="https://nodejs.org/zh-cn/">Node官网</a>下载,安装完了用cmd命令查看Node版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果出现一下信息，说明安装成功（版本号可以不一致，建议安装最新稳定版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v12.22.9</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>当你安装完Node.js之后，还需安装<a href="https://git-scm.com/">Git</a>，完事之后可用cmd命令查看Git的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br></pre></td></tr></table></figure><p>如果出现一下信息，说明安装成功（版本号可以不一致，建议安装最新稳定版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version 2.37.1.window.1</span><br></pre></td></tr></table></figure><h2 id="安装Hexo脚手架工具"><a href="#安装Hexo脚手架工具" class="headerlink" title="安装Hexo脚手架工具"></a>安装Hexo脚手架工具</h2><p>如果Git跟Node.js都安装完成后，即可开始！<br>首先，在cmd输入一下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="建立自己的博客"><a href="#建立自己的博客" class="headerlink" title="建立自己的博客"></a>建立自己的博客</h2><p>选自己喜欢的盘创建一个空白文件夹， 输入以下命令自动生成Hexo博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>部署完成后可在目录看到一下文件</p><ul><li>_config.yml #博客配置文件</li><li>package.json #模块和依赖项</li><li>scaffolds</li><li>source #文章</li><li>_drafts #草稿目录</li><li>_posts #发布的文章目录</li><li>themes #主题</li></ul><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><blockquote><p><font color=#000>#Hexo Configuration<br><font color=#000>##Docs: <a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a><br><font color=#000>##Source: <a href="https://github.com/hexojs/hexo/">https://github.com/hexojs/hexo/</a></p></blockquote><blockquote><p><font color=#000>#Siite<br><font color=#000>title: <font color=orange>网站标题如：lulu-blog<br><font color=#000>subtitle: <font color=orange>网站副标题：lulu<br><font color=#000>description: <font color=orange>网站描述： blog for tech<br><font color=#000>author: <font color=orange>网站作者：lulu<br><font color=#000>language: <font color=orange>网站的语言<br><font color=#000>timezone:   <font color=orange>网站的时间区，默认使用的是电脑的时区<br><font color=#000>#URL</font><br><font color=#000>##If your site is put in a subdirectory, set url as <code>http://yoursite.com/child</code> and root as ‘&#x2F;child&#x2F;‘<br><font color=#000>url: 网站地址：<a href="https://github.com/luluminusone.github.io.git">https://github.com/luluminusone.github.io.git</a><br><font color=#000>root: 网站根目录,建议是用’&#x2F;‘</font><br><font color=#000>permalink: 文章的永久链接格式，默认就好 :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;<br><font color=#000>permalink_defaults: 永久链接中各部分的默认值，不用填</p><p><font color=#000>#Directory</font><br><font color=#000>source_dir: 资源文件夹，存放文章用的：source<br><font color=#000>public_dir: 公共文件夹，用来存放编译之后的文件：public<br><font color=#000>tag_dir: 标签文件夹：tags</font><br><font color=#000>archive_dir: 归档文件夹，也就是你的全部文章生成的目录：archives<br><font color=#000>category_dir: 分类文件夹：categories<br><font color=#000>code_dir: Include code文件夹：downloads&#x2F;code<br><font color=#000>i18n_dir: 国际化（i18n）文件夹:lang<br><font color=#000>skip_render: 需要跳过渲染的文件存放的文件夹</p><p><font color=#000>#Writing</font><br><font color=#000>new_post_name: :<font color=orange>title.md <font color=#000># File name of new posts<br><font color=#000>default_layout: 默认文章样式：post<br><font color=#000>titlecase: <font color=orange>false <font color=#000># Transform title into titlecase<br><font color=#000>external_link: <font color=orange>true <font color=#000># Open external links in new tab<br><font color=#000>filename_case: 0<br><font color=#000>render_drafts: <font color=orange>false<br><font color=#000>post_asset_folder: <font color=orange>false<br><font color=#000>relative_link: <font color=orange>false<br><font color=#000>future: <font color=orange>true<br><font color=#000>highlight:<br><font color=#000>enable: <font color=orange>true<br><font color=#000>line_number: <font color=orange>true<br><font color=#000>auto_detect: <font color=orange>false<br><font color=#000>tab_replace:</p><p><font color=#000>#Home page setting</font><br><font color=#000>#path: Root path for your blogs index page. (default &#x3D; ‘’)<br><font color=#000>#per_page: Posts displayed per page. (0 &#x3D; disable pagination)<br><font color=#000>#order_by: Posts order. (Order by date descending by default)<br><font color=#000>index_generator:<br><font color=#000>path: ‘’<br><font color=#000>per_page: <font color=orange>每一页显示的文章：10<br><font color=#000>order_by: -date</p><p><font color=#000>#Category &amp; Tag<br><font color=#000>default_category: <font color=orange>uncategorized<br><font color=#000>category_map:<br><font color=#000>tag_map:</p><p><font color=#000>#Date &#x2F; Time format<br><font color=#000>##Hexo uses Moment.js to parse and display date<br><font color=#000>##You can customize the date format as defined in<br><font color=#000>##<code>http://momentjs.com/docs/#/displaying/format/</code><br><font color=#000>date_format: <font color=orange>YYYY-MM-DD<br><font color=#000>time_format: HH:mm:ss</p><p><font color=#000>#Pagination<br><font color=#000>##Set per_page to 0 to disable pagination<br><font color=#000>per_page: <font color=orange>10<br><font color=#000>pagination_dir: page</p><p><font color=#000>#Extensions<br><font color=#000>##Plugins: <code>https://hexo.io/plugins/</code><br><font color=#000>##Themes: <code>https://hexo.io/themes/</code><br><font color=#000>theme: <font color=orange>主题：flex-block</p><p><font color=#000>#Deployment<br><font color=#000>##Docs: <code>https://hexo.io/docs/deployment.html</code><br><font color=#000>deploy:<br><font color=#000>type: git<br><font color=#000>repo: <code>https://github.com/luluminusone/luluminusone.github.io.git</code><br><font color=#000>branch: master</p></blockquote><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>说完配置文件，就要说一下写作的技巧，使用cmd命令创建一篇文章（当然，你也可以在你自己的编辑器里面，找到source&#x2F;_post&#x2F;这个文件夹去创建md文件用于编写文章）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&#x27;我的第一篇文章&#x27;</span></span><br></pre></td></tr></table></figure><p>以上是用命令行去创建的，用编辑器创建的就不用教了吧，鼠标右键创建即可。</p><p>hexo还有一个文件夹是草稿文件夹_draft，可以用理解成私密文章的功能，只要有不想显示的文章但是又不想删除，就可以把文章拖进去_draft文件夹就可以实现隐藏的功能了，也可以用hexo的命令将文章放到草稿文件夹。</p><h2 id="编译文章"><a href="#编译文章" class="headerlink" title="编译文章"></a>编译文章</h2><p>当我们写好文章的时候，需要预览的话，在编辑器的terminal或者cmd命令编写以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g  或者  hexo generate(二选一)</span><br></pre></td></tr></table></figure><h2 id="预览文章"><a href="#预览文章" class="headerlink" title="预览文章"></a>预览文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s  或者  hexo server（二选一）</span><br></pre></td></tr></table></figure><p>如果需要预览draft文件夹下面的文件，需要在后面加上–draft参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --draft</span><br></pre></td></tr></table></figure><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>当写完文章时，需要对文章编译后上传，部署到GitHub仓库里，我们需要注册一个GitHub账号，建议科学上网去注册，不然太慢了，如果GitHub注册问题无法解决，可以使用国内的<a href="https://gitee.com/">码云</a>注册一个仓库，其实相当于国内的GitHub你可以这么理解。<br>在码云创建好仓库之后，将仓库的SSH后面的地址复制到_config.yml文件里，找到以下这个地方，修改一下</p><blockquote><p><font color=#000>#Deployment<br><font color=#000>##Docs: <code>https://hexo.io/docs/deployment.html</code><br><font color=#000>deploy:<br><font color=#000>type: git<br><font color=#000>repo: 这里填写为刚复制仓库的SSH地址<br><font color=#000>branch: master</p></blockquote><p>哦对了，对于如何生成SSH公钥我把码云公钥教程也放这里吧，大家不要着急，一步一步来搭建博客不难的。<a href="https://gitee.com/help/articles/4181">SSH公钥教程</a>,码云写的教程还是比较详细的。</p><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><p>到了上传项目这一步了，我们需要用到hexo的GitHub插件<font color="orange">hexo-deployer-git</font>,首先cmd命令去下载这个插件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就到了万众瞩目的一步了，输入以下cmd命令即可上传项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure><h2 id="完成项目！！！大家辛苦了"><a href="#完成项目！！！大家辛苦了" class="headerlink" title="完成项目！！！大家辛苦了"></a>完成项目！！！大家辛苦了</h2><h2 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h2><p>刚生成的项目主题应该是有很多人不太喜欢的，这里放一个hexo主题网站，大家在里面选自己喜欢的主题，然后可以在GitHub或者码云上clone主题到themes这个文件夹里，网站在这<a href="https://hexo.io/themes/">主题</a>。<br>git克隆的指令如下,可以在用cmd命令，也可用git bash here。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</span><br><span class="line">记住，上述指令git <span class="built_in">clone</span>和网址后的.git themes/(这里是起文件夹名，英文就好，可随便起)</span><br><span class="line">是必须要有的，中间的是网址，找到你自己喜欢的主题，在github或码云上搜，然后将搜到的主</span><br><span class="line">题仓库网址复制即可到中间即可，纯手打也行。</span><br></pre></td></tr></table></figure><p>克隆完成后，在_config.yml文件，找到theme: landscape将他改成你克隆主题的文件夹名字即可，例如一上面为例，改成theme: indigo<br>这里就OK了，然后运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这样就大功告成，如果有些主题部署报错，那就换一个吧，别纠结了，当然，如果有能力会改错修改bug也可以成功用到报错的主题，以上！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实写这篇文章缘由是在于对想搭建博客的兄弟姐妹们的一个保姆级教程，hexo是一个容易上手，零成本，搭建操作较简单的工具。&lt;/p&gt;
&lt;p&gt;用hexo来搭博客是使用markdown文件来解析，json进行数据存储，不需要数据库去存储数据，文档比较完善，其官方插件较多，可以满足大</summary>
      
    
    
    
    <category term="搭建" scheme="https://luluminusone.github.io/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Lulu blog for tec</title>
    <link href="https://luluminusone.github.io/2022/07/19/hello-my-blog/"/>
    <id>https://luluminusone.github.io/2022/07/19/hello-my-blog/</id>
    <published>2022-07-19T08:13:28.392Z</published>
    <updated>2022-07-21T06:38:08.786Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己的成长之路，学无止境</p><p>其实写blog是对自己在前端学习路上的一个小帮手，因为前端知识很多很多，也算是总结学习成果，加油吧！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录自己的成长之路，学无止境&lt;/p&gt;
&lt;p&gt;其实写blog是对自己在前端学习路上的一个小帮手，因为前端知识很多很多，也算是总结学习成果，加油吧！！！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="有感" scheme="https://luluminusone.github.io/categories/%E6%9C%89%E6%84%9F/"/>
    
    
  </entry>
  
</feed>
