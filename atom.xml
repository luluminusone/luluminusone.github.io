<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lulu-blog</title>
  
  <subtitle>lulu</subtitle>
  <link href="https://luluminusone.github.io/atom.xml" rel="self"/>
  
  <link href="https://luluminusone.github.io/"/>
  <updated>2022-08-10T02:33:20.157Z</updated>
  <id>https://luluminusone.github.io/</id>
  
  <author>
    <name>lulu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于vue的笔记</title>
    <link href="https://luluminusone.github.io/2022/08/03/vue/"/>
    <id>https://luluminusone.github.io/2022/08/03/vue/</id>
    <published>2022-08-03T03:25:15.471Z</published>
    <updated>2022-08-10T02:33:20.157Z</updated>
    
    <content type="html"><![CDATA[<p>关于vue的部署安装和使用文档的网址在这<a href="https://cn.vuejs.org/v2/guide/installation.html">vue</a>，然后写一写vue的学习笔录。</p><h3 id="vue核心特性"><a href="#vue核心特性" class="headerlink" title="vue核心特性"></a>vue核心特性</h3><h4 id="数据驱动（MVVM）"><a href="#数据驱动（MVVM）" class="headerlink" title="数据驱动（MVVM）"></a>数据驱动（MVVM）</h4><p>MVVM指的是Model-View-ViewModel<br>Model: 模型层：负责处理业务逻辑以及和服务器端进行交互。<br>View: 视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面。<br>ViewModel: 视图模型层：用来连接Model和View，是Model和View之间的通信桥梁。<br>那就来创建一个简单实例简单讲解一下mvvm。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   const app = vue.createApp(&#123;</span><br><span class="line">     data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">         message: &#x27;hello world&#x27;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template: `&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span><br><span class="line">   &#125;);</span><br><span class="line">   const vm = app.mount(&#x27;#root&#x27;);  //这里用vm起名也是方便理解为vue的各个根组件</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在引入vue.js文件后，上面的代码就是一个简单的vue实例，可以这样理解，定义的数据message就是vue的model层，template就是vue的模板，也就是view层。<br>将定义的数据（model）和模板（view）连接起来的就是ViewModel，那什么是ViewModel呢？ViewModel就是vue应用的各个根组件。ViewModel的作用是数据变化后更新视图，视图变化后更新数据。</p><h4 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h4><p>所谓的生命周期函数指的是在某一时刻自动执行的函数。<br>相对于vue来说可以分为四个阶段（生命周期）：<br>1、初始化 &#x3D;&gt; 创建组件 &#x3D;&gt; beforeCreate created<br>2、挂载 &#x3D;&gt; 渲染显示组件 &#x3D;&gt; beforeMount mounted<br>3、更新 &#x3D;&gt; 修改了变量 &#x3D;&gt; 触发视图刷新 &#x3D;&gt; beforeUpdate updated<br>4、销毁 &#x3D;&gt; 切换页面 &#x3D;&gt; 会把组件对象从内存删除 &#x3D;&gt; beforeDestroy destroyed<br><a href="https://cn.vuejs.org/v2/guide/instance.html">vue生命周期函数图示</a></p><h4 id="vue常用的指令"><a href="#vue常用的指令" class="headerlink" title="vue常用的指令"></a>vue常用的指令</h4><p>v-model: 双向数据绑定指令<br>v-if: 条件渲染指令<br>v-for: 列表渲染指令<br>v-bind: 属性绑定指令<br>v-on: 事件绑定指令<br>举个简单小例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">todolist小案例</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   const app = vue.createApp(&#123;</span><br><span class="line">     data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">         inputValue: &#x27;&#x27;,</span><br><span class="line">         list: []</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         handleAddItem() &#123;</span><br><span class="line">           this.list.push(this.inputValue);</span><br><span class="line">           this.inputValue = &#x27;&#x27;;  //数据双向绑定</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       template: `</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">         &lt;input v-model=&quot;inputValue&quot; /&gt;  //数据双向绑定</span><br><span class="line">         &lt;button v-on:click=&quot;handleAddItem&quot;&gt;增加&lt;/button&gt;  //事件绑定</span><br><span class="line">         &lt;ul&gt;</span><br><span class="line">           &lt;li v-for=&quot;(item, index) of list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;  //列表遍历</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       `</span><br><span class="line">   &#125;).mount(&#x27;#root&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h4><p>官方文档<a href="https://v2.cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4">vue.js</a><br>在文档里，有一些指令是有修饰符的，举个简单例子来写一下，具体有别的需求可以查看官方文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-on指令</span><br><span class="line">&lt;button @click.stop=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="computed计算属性和侦听器"><a href="#computed计算属性和侦听器" class="headerlink" title="computed计算属性和侦听器"></a>computed计算属性和侦听器</h4><p>计算属性有缓存，提高渲染性能，若对现有的数据进行加工得到新数据，那就需要使用计算属性。<br><a href="https://v2.cn.vuejs.org/v2/guide/computed.html">计算属性的文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">模板</span><br><span class="line">computed: &#123;</span><br><span class="line">    &quot;属性名&quot;: &#123;</span><br><span class="line">        set(值) &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;,</span><br><span class="line">        get() &#123;</span><br><span class="line">            return &quot;值&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://v2.cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8">侦听器文档</a><br>侦听器可以监听数据（data&#x2F;computed等）的值的改变。<br>实战当中深度监听可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    &quot;要监听的属性名&quot;: &#123;</span><br><span class="line">        immediate: true,  //立即执行</span><br><span class="line">        deep: true,  //深度监听复杂类型内变化</span><br><span class="line">        handler (newVal, oldVal) &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p><a href="https://v2.cn.vuejs.org/v2/guide/components.html">vue组件文档</a><br>用通俗的话去说的话，就是一个类似某东的网页，里面会有导航条，广告栏，轮播图，商品等等，从这里可以分为一个个的组件，比如说导航条组件，广告栏组件等等。<br>其意思就是将各部分分开去书写代码，然后通过导出引入的方式去组成一个网页，这样如果出现报错或bug等等原因可以更有效定位去解决问题，提高了可维护性。<br>组件分为全局组件和局部组件，先说全局组件。<br>全局组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    template: `</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">          &lt;hello /&gt;</span><br><span class="line">          &lt;world /&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    `&#125;)</span><br><span class="line">    app.component(&#x27;hello&#x27;, &#123;</span><br><span class="line">      template: `&lt;div&gt;hello&lt;/div&gt;`</span><br><span class="line">    &#125;)</span><br><span class="line">    app.component(&#x27;world&#x27;, &#123;</span><br><span class="line">      template: `&lt;div&gt;world&lt;/div&gt;`</span><br><span class="line">    &#125;)</span><br><span class="line">    const vm = app.mount(&#x27;#root&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>局部组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const Hello = &#123;</span><br><span class="line">    template: `&lt;div&gt;hello&lt;/div&gt;`</span><br><span class="line">  &#125;</span><br><span class="line">  const World = &#123;</span><br><span class="line">    template: `&lt;div&gt;world&lt;/div&gt;`</span><br><span class="line">  &#125;</span><br><span class="line">  const app = Vue.createApp(&#123;</span><br><span class="line">    components: &#123; </span><br><span class="line">    hello: Hello,</span><br><span class="line">    world: World</span><br><span class="line">    &#125;</span><br><span class="line">    template: `</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">          &lt;hello /&gt;</span><br><span class="line">          &lt;world /&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    `&#125;)</span><br><span class="line">    const vm = app.mount(&#x27;#root&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>未完待续….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于vue的部署安装和使用文档的网址在这&lt;a href=&quot;https://cn.vuejs.org/v2/guide/installation.html&quot;&gt;vue&lt;/a&gt;，然后写一写vue的学习笔录。&lt;/p&gt;
&lt;h3 id=&quot;vue核心特性&quot;&gt;&lt;a href=&quot;#vue核心</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>关于数组的常用方法和字符串的常用方法笔记</title>
    <link href="https://luluminusone.github.io/2022/08/01/zengshangaicha/"/>
    <id>https://luluminusone.github.io/2022/08/01/zengshangaicha/</id>
    <published>2022-08-01T03:06:02.105Z</published>
    <updated>2022-08-02T01:52:52.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对数组和字符串的增、删、改、查，四个字展开写一写。"><a href="#对数组和字符串的增、删、改、查，四个字展开写一写。" class="headerlink" title="对数组和字符串的增、删、改、查，四个字展开写一写。"></a>对数组和字符串的增、删、改、查，四个字展开写一写。</h2><h3 id="对数组"><a href="#对数组" class="headerlink" title="对数组"></a>对数组</h3><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</span><br><span class="line">push()</span><br><span class="line">unshift()</span><br><span class="line">splice()</span><br><span class="line">concat()</span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p>接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let colors = [];  //创建数组</span><br><span class="line">let count = colors.push(&quot;red&quot;,&quot;green&quot;);  //从数组末尾推入两项</span><br><span class="line">console.log(count);  //2</span><br><span class="line">console.log(colors);  //[&#x27;red&#x27;,&#x27;green&#x27;]</span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p>在数组开头添加任意多个值，然后返回新的数组长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let colors = [];  //创建数组</span><br><span class="line">let count = colors.unshift(&quot;red&quot;,&quot;green&quot;);  //从数组开头推入两项</span><br><span class="line">console.log(count);  //2</span><br><span class="line">console.log(colors);  //[&#x27;red&#x27;,&#x27;green&#x27;]</span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;];</span><br><span class="line">let removed = colors.splice(1, 0, &quot;black&quot;, &quot;pink&quot;);</span><br><span class="line">console.log(colors);  //[&#x27;red&#x27;, &#x27;black&#x27;, &#x27;pink&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span><br><span class="line">console.log(removed)  //[]</span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不影响原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let colors1 = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br><span class="line">let colors2 = colors1.concat(&quot;black&quot;, &quot;pink&quot;);</span><br><span class="line">console.log(colors1);  //[&#x27;red&#x27;, &#x27;green&#x27;, &#x27;&#x27;blue]</span><br><span class="line">console.log(colors2);  //[&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;, &#x27;pink&#x27;]</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下面前三种都会影响原数组，最后一项不影响原数组</span><br><span class="line">pop()</span><br><span class="line">shift()</span><br><span class="line">splice()</span><br><span class="line">slice()</span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>删除数组的最后一项，同时减少数组的length值，返回被删除的项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&quot;red&quot;, &quot;green&quot;];</span><br><span class="line">let item = colors.pop();</span><br><span class="line">console.log(item);  //green</span><br><span class="line">console.log(colors.length);  //1</span><br><span class="line">console.log(colors);  //[&#x27;red&#x27;]</span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p>删除数组的第一项，同时减少数组的length值，返回被删除的项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&quot;red&quot;, &quot;green&quot;];</span><br><span class="line">let item = colors.shift();</span><br><span class="line">console.log(item);  //red</span><br><span class="line">console.log(colors.length);  //1</span><br><span class="line">console.log(colors);  //[&#x27;green&#x27;]</span><br></pre></td></tr></table></figure><h4 id="splice-1"><a href="#splice-1" class="headerlink" title="splice()"></a>splice()</h4><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br><span class="line">let removed = colors.splice(0, 1);  //删除第一项</span><br><span class="line">console.log(colors);   //[&#x27;green&#x27;, &#x27;blue&#x27;]</span><br><span class="line">console.log(removed);  //[&#x27;red&#x27;]</span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p>创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let colors1 = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;purple&quot;];</span><br><span class="line">let colors2 = colors.slice(1);</span><br><span class="line">let colors3 = colors.slice(1, 4);</span><br><span class="line">console.log(colors1)   // [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;purple&#x27;]</span><br><span class="line">concole.log(colors2);  // [&#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;purple&#x27;]</span><br><span class="line">concole.log(colors3);  // [&#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;]</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>常用splice方法去修改数组的内容。</p><h4 id="splice-2"><a href="#splice-2" class="headerlink" title="splice()"></a>splice()</h4><p>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];</span><br><span class="line">let removed = colors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;);  //插入两个值，删除一个元素</span><br><span class="line">console.log(colors);  //[&#x27;red&#x27;, &#x27;red&#x27;, &#x27;purple&#x27;, &#x27;blue&#x27;]</span><br><span class="line">console.log(removed);  //[&#x27;green&#x27;]，只有一个元素的数组</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查找元素，返回元素坐标或者元素值</span><br><span class="line">indexOf()</span><br><span class="line">includes()</span><br><span class="line">find()</span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];</span><br><span class="line">numbers.indexOf(4)  //3</span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>返回要查找的元素在数组中的位置，找到返回true，否则false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1];</span><br><span class="line">numbers.includes(4)  //true</span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>返回第一个匹配的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const people = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: &quot;alex&quot;,</span><br><span class="line">        age: 18</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: &quot;lulu&quot;,</span><br><span class="line">        age: 20</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line">people.find((element, index, array) =&gt; element.age &lt; 19) // // &#123;name: &quot;alex&quot;, age: 18&#125;</span><br></pre></td></tr></table></figure><h3 id="对字符串"><a href="#对字符串" class="headerlink" title="对字符串"></a>对字符串</h3><p>有一点需要注意的是字符串创建了就不可变了，所以字符串的增、删、改都是创建字符串的副本去进行操作的。</p><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><h4 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h4><p>用于将一个或多个字符串拼接成一个新字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let stringValue = &quot;hello &quot;;</span><br><span class="line">let result = stringValue.concat(&quot;world&quot;);</span><br><span class="line">console.log(result);  //&quot;hello world&quot;</span><br><span class="line">console.log(stringValue);  //&quot;hello&quot;</span><br></pre></td></tr></table></figure><h3 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常用的方法</span><br><span class="line">slice()</span><br><span class="line">substr()</span><br><span class="line">substring()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这三个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。</span><br><span class="line">let stringValue = &quot;hello world&quot;;</span><br><span class="line">console.log(stringValue.slice(3));        //&quot;lo world&quot;</span><br><span class="line">console.log(stringValue.substring(3));    //&quot;lo world&quot;</span><br><span class="line">console.log(stringValue.substr(3));       //&quot;lo world&quot;</span><br><span class="line">console.log(stringValue.slice(3, 7));     //&quot;lo w&quot;</span><br><span class="line">console.log(stringValue.substring(3, 7));  //&quot;lo w&quot;</span><br><span class="line">console.log(stringValue.substr(3, 7));    //&quot;lo worl&quot;</span><br></pre></td></tr></table></figure><h3 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用的方法</span><br><span class="line">trim()、trimLeft()、trimRight()</span><br><span class="line">repeat()</span><br><span class="line">padStart()、padEnd()</span><br><span class="line">toLowerCase()、 toUpperCase()</span><br></pre></td></tr></table></figure><h4 id="trim-、trimLeft-、trimRight"><a href="#trim-、trimLeft-、trimRight" class="headerlink" title="trim()、trimLeft()、trimRight()"></a>trim()、trimLeft()、trimRight()</h4><p>删除前、后或前后所有空格符，再返回新的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let stringValue = &quot;hello world&quot;;</span><br><span class="line">let trimmedStringValue = stringValue.trim();</span><br><span class="line">console.log(stringValue);         //&quot;hello world&quot;</span><br><span class="line">console.log(trimmedStringValue);  //&quot;hello world&quot;</span><br></pre></td></tr></table></figure><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h4><p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let stringValue = &quot;lu&quot;;</span><br><span class="line">let copyResult = stringValue.repeat(2)  //lu lu </span><br></pre></td></tr></table></figure><h4 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h4><p>复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let stringValue = &quot;foo&quot;;</span><br><span class="line">console.log(stringValue.padStart(6));      // &quot; lu&quot;</span><br><span class="line">console.log(stringValue.padStart(9, &quot;.&quot;)); // &quot;.......lu&quot;</span><br></pre></td></tr></table></figure><h4 id="toLowerCase-、-toUpperCase"><a href="#toLowerCase-、-toUpperCase" class="headerlink" title="toLowerCase()、 toUpperCase()"></a>toLowerCase()、 toUpperCase()</h4><p>大小写转化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let stringValue = &quot;hello world&quot;;</span><br><span class="line">console.log(stringValue.toUpperCase());  //&quot;HELLO WORLD&quot;</span><br><span class="line">console.log(stringValue.toLowerCase());  //&quot;hello world&quot;</span><br></pre></td></tr></table></figure><h3 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用方法有</span><br><span class="line">chatAt()</span><br><span class="line">indexOf()</span><br><span class="line">startWith()</span><br><span class="line">includes()</span><br></pre></td></tr></table></figure><h4 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h4><p>返回给定索引位置的字符，由传给方法的整数参数指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let message = &quot;abcde&quot;;</span><br><span class="line">console.log(message.charAt(2));  //&quot;c&quot;</span><br></pre></td></tr></table></figure><h4 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf()"></a>indexOf()</h4><p>从字符串开头去搜索传入的字符串，并返回位置（如果没找到，则返回 -1 ）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let stringValue = &quot;hello world&quot;;</span><br><span class="line">console.log(stringValue.indexOf(&quot;o&quot;));  //4</span><br></pre></td></tr></table></figure><h4 id="startWith-、includes"><a href="#startWith-、includes" class="headerlink" title="startWith()、includes()"></a>startWith()、includes()</h4><p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let message = &quot;blackpink&quot;;</span><br><span class="line">console.log(message.startsWith(&quot;bla&quot;));   //true</span><br><span class="line">console.log(message.startsWith(&quot;ack&quot;));   //false</span><br><span class="line">console.log(message.includes(&quot;ckp&quot;));     //true</span><br><span class="line">console.log(message.includes(&quot;lmn&quot;));     //false</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;对数组和字符串的增、删、改、查，四个字展开写一写。&quot;&gt;&lt;a href=&quot;#对数组和字符串的增、删、改、查，四个字展开写一写。&quot; class=&quot;headerlink&quot; title=&quot;对数组和字符串的增、删、改、查，四个字展开写一写。&quot;&gt;&lt;/a&gt;对数组和字符串的增、删</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>关于正则表达式笔记</title>
    <link href="https://luluminusone.github.io/2022/07/28/Rep/"/>
    <id>https://luluminusone.github.io/2022/07/28/Rep/</id>
    <published>2022-07-28T12:11:49.334Z</published>
    <updated>2022-08-01T02:55:50.461Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式一般用于校验账号或者密码（密钥）的正确性，记录一下正则表达式的语法规则。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>1、\d 匹配一个数字<br>2、\D 匹配一个非数字字符<br>3、\w 匹配一个单字字符（字母、数字或者下划线）<br>4、\W 匹配一个非单字字符<br>5、\s 匹配一个空白字符，包括空格、制表符和换行符<br>6、. 任意字符<br>7、^ 匹配开头<br>8、$ 匹配结尾</p><h2 id="元字符注意事项"><a href="#元字符注意事项" class="headerlink" title="元字符注意事项"></a>元字符注意事项</h2><p>如果使用new RegExp()写法，反斜杠需多写一个，因为\本身是转义字符。<br>比如&#x2F;^\d$&#x2F;和new RegExp(‘^\d$’)是相同的意思。<br>如果密钥规定有.或者#又或者其它符号，需要在前面加一个\。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">/^.$/      检查字符串是不是任意字符</span><br><span class="line">/^\.$/     检查字符串是不是一个点</span><br><span class="line">/^\\.$/    检查字符串是不是一个反斜杠</span><br></pre></td></tr></table></figure><h2 id="方括号表示法"><a href="#方括号表示法" class="headerlink" title="方括号表示法"></a>方括号表示法</h2><p>可以使用短横-来指定一个字符范围，^表示否定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">元字符      等价的方括号表示法</span><br><span class="line"> \d             [0-9]</span><br><span class="line"> \D             [^0-9]</span><br><span class="line"> \w             [A-Za-z0-9_]</span><br><span class="line"> \W             [^A-Za-z0-9_]</span><br></pre></td></tr></table></figure><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">量词             意义</span><br><span class="line"> *     匹配前一个表达式0次或多次。等价于&#123;0,&#125;</span><br><span class="line"> +     匹配前面一个表达式1次或者多次。等价于&#123;1,&#125;</span><br><span class="line"> ?     匹配前面一个表达式0次或者1次。等价于&#123;0,1&#125;</span><br><span class="line"> &#123;n&#125;   n是一个正整数，匹配了前面一个字符刚好出现了n次</span><br><span class="line"> &#123;n,&#125;  n是一个正整数，匹配前一个字符至少出现了n次</span><br><span class="line"> &#123;n,m&#125; n和m都是整数，匹配前面的字符至少n次，最多m次</span><br></pre></td></tr></table></figure><h2 id="正则表达式的书写"><a href="#正则表达式的书写" class="headerlink" title="正则表达式的书写"></a>正则表达式的书写</h2><p>借着一些例子去讲解。<br>例一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查银行卡密码是否六位数字</span><br><span class="line">var regexp1 = /^\d&#123;6&#125;$/;</span><br><span class="line">var regexp2 = new RegExp(&#x27;^\\d&#123;6&#125;$&#x27;);</span><br><span class="line">这两个表达式是表示同样的意思。</span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请验证某字符串是否是五位字母，大小写均可</span><br><span class="line">var str = &#x27;abcde&#x27;;    //true</span><br><span class="line">var regexp1 = /^[a-zA-Z]&#123;5&#125;$/</span><br></pre></td></tr></table></figure><p>例三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请验证某字符串是否是4位小写字母，且最后一位不能是m字母</span><br><span class="line">var str1 = &#x27;abcd&#x27;;    //true</span><br><span class="line">var str2 = &#x27;abcm&#x27;;    //false</span><br><span class="line">var regexp1 = /^[a-z]&#123;3&#125;[a-ln-z]$/   最后一位不能为m，那么范围取a到l，n到z</span><br></pre></td></tr></table></figure><p>例四：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请验证某字符串是否是这样的：以字母开头，中间是任意数字（最少1位）构成，并以字母结尾</span><br><span class="line">var str1 = &#x27;a564897b&#x27;; //true</span><br><span class="line">var str2 = &#x27;abcd&#x27;;     //false</span><br><span class="line">var str3 = &#x27;a1b&#x27;;      //true</span><br><span class="line">var regexp = /^[a-zA-Z]\d+[a-zA-Z]$/;</span><br></pre></td></tr></table></figure><p>例五：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请验证某字符串是否符合网址规则：以www.开头，中间是任意位的字符（字母数字下划线，最少一位，最后以.com结尾，也可以.com.cn结尾）</span><br><span class="line">var str1 = &#x27;www.abcd123.com&#x27;;  //true</span><br><span class="line">var str2 = &#x27;www.baidu.com&#x27;;    //true</span><br><span class="line">var str3 = &#x27;www.123aa&#x27; ;       //false</span><br><span class="line">var regexp = /^www\.\w+\.com(\.cn)?$/;</span><br></pre></td></tr></table></figure><p>有关于正则表达式大概先写，这么多，网上也有别人写好的正则表达式“轮子“,有需求可以直接查找即可。<br>这一篇主要是熟悉一下基本的用法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式一般用于校验账号或者密码（密钥）的正确性，记录一下正则表达式的语法规则。&lt;/p&gt;
&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;p&gt;1、\d 匹配一个数字&lt;br&gt;2、</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>关于闭包笔记</title>
    <link href="https://luluminusone.github.io/2022/07/27/bibao/"/>
    <id>https://luluminusone.github.io/2022/07/27/bibao/</id>
    <published>2022-07-27T01:18:47.896Z</published>
    <updated>2022-07-29T09:08:20.252Z</updated>
    
    <content type="html"><![CDATA[<p>其实在javascript开发中会有一个不成文的规定吧，尽量少用全局变量，因为全局变量容易会污染环境，占内存等等，那么我们用闭包去进行私有化变量，先看下面的例子吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    var name = &quot;alex&quot;</span><br><span class="line">    function b() &#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;</span><br><span class="line">    return b;</span><br><span class="line">&#125;</span><br><span class="line">var c = a();</span><br><span class="line">c();</span><br></pre></td></tr></table></figure><p>从上面的例子我们可以大概知道闭包形成要有四个条件：<br>1、有函数嵌套。<br>2、内部函数引用外部作用域的变量参数。<br>3、返回值是函数。<br>4、创建一个对象函数，让其长期驻留。<br>闭包的缺点是内存消耗大，如果滥用闭包会造成网页的性能问题，内存的泄露。<br>在使用完闭包最好将局部变量全部删除，也就是等与null即可。（释放内存）。<br>总的来说闭包就是创建私有变量，延长变量的生命周期。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实在javascript开发中会有一个不成文的规定吧，尽量少用全局变量，因为全局变量容易会污染环境，占内存等等，那么我们用闭包去进行私有化变量，先看下面的例子吧。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>关于原型链笔记</title>
    <link href="https://luluminusone.github.io/2022/07/26/yuanxinglian/"/>
    <id>https://luluminusone.github.io/2022/07/26/yuanxinglian/</id>
    <published>2022-07-26T00:36:31.045Z</published>
    <updated>2022-07-28T09:14:01.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是prototype"><a href="#什么是prototype" class="headerlink" title="什么是prototype"></a>什么是prototype</h2><p>任何函数都有prototype属性，prototype属性值是个对象，默认拥有constructor属性指回函数。<br><img src="https://s2.loli.net/2022/07/28/O2eKQkRvN9syfnS.png" alt="prototype.png"><br>构造函数的prototype属性是它的实例的原型。<br><img src="https://s2.loli.net/2022/07/28/nAtvMw2VEZjfgDx.png" alt="微信截图_20220728170407.png"><br>原型链的终点：<br><img src="https://s2.loli.net/2022/07/28/WNrcR7wKo9b2sdg.png" alt="11111.png"><br>数组的：<br><img src="https://s2.loli.net/2022/07/28/jARxhLqZUBwSHWp.png" alt="2222222.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是prototype&quot;&gt;&lt;a href=&quot;#什么是prototype&quot; class=&quot;headerlink&quot; title=&quot;什么是prototype&quot;&gt;&lt;/a&gt;什么是prototype&lt;/h2&gt;&lt;p&gt;任何函数都有prototype属性，prototype属性值</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>关于this笔记</title>
    <link href="https://luluminusone.github.io/2022/07/25/this/"/>
    <id>https://luluminusone.github.io/2022/07/25/this/</id>
    <published>2022-07-25T00:39:37.729Z</published>
    <updated>2022-07-28T08:12:42.347Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，函数中可以使用this关键字，它表示函数的上下文，那么上下文又是什么呢？<br>举个例子：多吃水果，这会对身体好。（那么”这”指的是多吃水果）。<br>回到我们的js函数里，可以这么理解，函数中的this具体指代什么东西，就需要通过调用函数时的上下文去判断了。<br>this指向的规则下面我会举一些例子去说明。</p><h3 id="规则一"><a href="#规则一" class="headerlink" title="规则一"></a>规则一</h3><p>对象打点调用它的方法函数，则函数的上下文是这个打点的对象。<br>对象.方法（）<br>例子一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><br><span class="line">    console.log(this.a + this.b);</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    fn: fn</span><br><span class="line">&#125;;</span><br><span class="line">obj.fn();  //输出的结果为3，obj调用fn函数，this指向obj</span><br></pre></td></tr></table></figure><p>例子二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    fn: function() &#123;</span><br><span class="line">        console.log(this.a + this.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = &#123;</span><br><span class="line">    a: 3,</span><br><span class="line">    b: 4,</span><br><span class="line">    fn: obj1.fn</span><br><span class="line">&#125;;</span><br><span class="line">obj2.fn();  //输出的结果为7，obj2调用fn函数，this指向obj2</span><br></pre></td></tr></table></figure><p>例子三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function outer() &#123;</span><br><span class="line">    var a = 1;</span><br><span class="line">    var b = 2;</span><br><span class="line">    return &#123;</span><br><span class="line">        a: 3,</span><br><span class="line">        b: 4,</span><br><span class="line">        fn: function () &#123;</span><br><span class="line">            console.log(this.a + this.b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">outer().fn();  //输出的结果为7，调用outer函数，return一个对象，再调用fn函数，那么this指向对象里的a和b</span><br></pre></td></tr></table></figure><h3 id="规则二"><a href="#规则二" class="headerlink" title="规则二"></a>规则二</h3><p>直接调用函数，则函数的上下文是window对象。<br>函数（）<br>例子一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    fn: function () &#123;</span><br><span class="line">        console.log(this.a + this.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var a = 3;</span><br><span class="line">var b = 4;</span><br><span class="line">var fn = obj1.fn;</span><br><span class="line">fn();  //输出结果为7，函数直接调用，则this指向window对象的a和b</span><br></pre></td></tr></table></figure><p>例子二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    return this.a + this.b;</span><br><span class="line">&#125;</span><br><span class="line">var a = 1;</span><br><span class="line">var b = 2;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 3,</span><br><span class="line">    b: fun(),  //输出结果为3，直接调用函数，this指向window对象的a和b</span><br><span class="line">    fn: fun</span><br><span class="line">&#125;;</span><br><span class="line">var result = obj.fun();  //输出结果为6，obj打点调用函数，this指向obj的a和b</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><h3 id="规则三"><a href="#规则三" class="headerlink" title="规则三"></a>规则三</h3><p>数组（类数组对象）枚举出函数进行调用，上下文是这个数组（类数组对象）。<br>数组[下标]（）<br>例子一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;,function () &#123;</span><br><span class="line">    console.log(this[0]);</span><br><span class="line">&#125;];</span><br><span class="line">arr[3]();  //输出结果为A,this指向arr数组的第0项</span><br></pre></td></tr></table></figure><p>例子二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    arguments[3]();  </span><br><span class="line">&#125;</span><br><span class="line">fun(&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, function () &#123;</span><br><span class="line">    console.log(this[1]);  //输出结果为B，this指向数组的第1项</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="规则四"><a href="#规则四" class="headerlink" title="规则四"></a>规则四</h3><p>在IIFE中的函数，上下文是window对象<br>(function() {</p><p>})();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 2,</span><br><span class="line">    fun: (function () &#123;</span><br><span class="line">        var a = this.a;</span><br><span class="line">        return function () &#123;</span><br><span class="line">            console.log(a + this.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()  //IIFE函数中，this指向window，a = 1</span><br><span class="line">&#125;;</span><br><span class="line">obj.fun();  //输出结果为3，对象调用函数，this指向这个对象obj的a，a = 2</span><br></pre></td></tr></table></figure><h3 id="规则五"><a href="#规则五" class="headerlink" title="规则五"></a>规则五</h3><p>定时器、延时器调用函数，上下文是window对象<br>setInterval(函数，时间);<br>setTimeout(函数，时间);<br>例子一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    fun: function () &#123;</span><br><span class="line">        console.log(this.a + this.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = 3;</span><br><span class="line">var b = 4;</span><br><span class="line">setTimeout(obj.fun, 2000);  //输出结果为7，定时器直接调用函数，this指向window的a和b</span><br></pre></td></tr></table></figure><p>例子二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    fun: function () &#123;</span><br><span class="line">        console.log(this.a + this.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var a = 3;</span><br><span class="line">var b = 4;</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    obj.fun();  //输出结果为3，obj调用函数，this指向对象obj</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure><h3 id="规则六"><a href="#规则六" class="headerlink" title="规则六"></a>规则六</h3><p>事件处理函数的上下文是绑定事件的DOM元素<br>DOM元素.onclick &#x3D; function () {</p><p>};<br>例子一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#box1 &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    width: 99px;</span><br><span class="line">    height: 99px;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">#box2 &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    width: 99px;</span><br><span class="line">    height: 99px;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">#box3 &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    width: 99px;</span><br><span class="line">    height: 99px;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function setColorToRed() &#123;</span><br><span class="line">            this.style.backgroundColor = &#x27;red&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        var box1 = document.getElementById(&#x27;box1&#x27;);</span><br><span class="line">        var box2 = document.getElementById(&#x27;box2&#x27;);</span><br><span class="line">        var box3 = document.getElementById(&#x27;box3&#x27;);</span><br><span class="line">        box1.onclick = setColorToRed;  //this指向box1</span><br><span class="line">        box2.onclick = setColorToRed;  //this指向box2</span><br><span class="line">        box3.onclick = setColorToRed;  //this指向box3</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="规则七"><a href="#规则七" class="headerlink" title="规则七"></a>规则七</h3><p>箭头函数不会绑定this，也就是说箭头函数没有this，箭头函数在被申明确定this，这时它会直接将当前作用域的this作为自己的this<br>例子一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var name = &quot;alex&quot;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;bill&quot;,</span><br><span class="line">    fun: () =&gt; &#123;</span><br><span class="line">        console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var fun = obj.fun;</span><br><span class="line">obj.fun();  //输出为alex</span><br><span class="line">fun();  //输出为alex</span><br></pre></td></tr></table></figure><p>obj在创建时申明了箭头函数，箭头函数会寻找当前作用域，因obj是一个对象，并不是作用域，所以this指向window作用域<br>例子二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var name = &quot;alex&quot;;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;bill&quot;,</span><br><span class="line">    fun: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            getName: () =&gt; &#123;</span><br><span class="line">                console.log(this.myName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var fun = obj.fun().getName;</span><br><span class="line">obj.fun().getName();  //输出为bill</span><br><span class="line">fun();  //输出为bill</span><br></pre></td></tr></table></figure><p>首先箭头函数在obj.fun()的返回值申明的，this是fun()当前作用域的this，因被obj调用，所以this指向对象obj。<br>fun()的结果输出为bill,原因var fun &#x3D; obj.fun().getName先执行obj.fun()，箭头函数被申明，那么this同样是fun()当前作用域的this，由于fun()是被obj调用的，所以this指向调用对象obj。</p><h3 id="规则八"><a href="#规则八" class="headerlink" title="规则八"></a>规则八</h3><p>在函数作用域里，严格模式下的this为undefined，若本身在全局作用域，this还是指向window。</p><h2 id="this指向是可以改变的"><a href="#this指向是可以改变的" class="headerlink" title="this指向是可以改变的"></a>this指向是可以改变的</h2><p>使用call、apply和bind函数可以修改this指向。</p><h3 id="call修改this指向"><a href="#call修改this指向" class="headerlink" title="call修改this指向"></a>call修改this指向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;alex&quot;,</span><br><span class="line">    fun: function(age,gender) &#123;</span><br><span class="line">        console.log(`我系$&#123;this.name&#125;，今年$&#123;age&#125;岁，来自$&#123;gender&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = &#123;</span><br><span class="line">    name: &quot;lulu&quot;</span><br><span class="line">&#125;</span><br><span class="line">obj.fun.call(obj2, 18, &quot;广州南沙&quot;);   </span><br></pre></td></tr></table></figure><p>call的第一个参数是手动指定this，所以this.name就指向obj2。</p><h3 id="apply修改this指向"><a href="#apply修改this指向" class="headerlink" title="apply修改this指向"></a>apply修改this指向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;alex&quot;,</span><br><span class="line">    fun: function(age,gender) &#123;</span><br><span class="line">        console.log(`我系$&#123;this.name&#125;，今年$&#123;age&#125;岁，来自$&#123;gender&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = &#123;</span><br><span class="line">    name: &quot;lulu&quot;</span><br><span class="line">&#125;</span><br><span class="line">obj.fun.apply(obj2, [18, &quot;广州南沙&quot;]);   </span><br></pre></td></tr></table></figure><p>同样的,apply第一个参数也是修改this指向，所以this.name指向obj2。</p><h3 id="bind修改this指向"><a href="#bind修改this指向" class="headerlink" title="bind修改this指向"></a>bind修改this指向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &quot;alex&quot;,</span><br><span class="line">    fun: function(age,gender) &#123;</span><br><span class="line">        console.log(`我系$&#123;this.name&#125;，今年$&#123;age&#125;岁，来自$&#123;gender&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = &#123;</span><br><span class="line">    name: &quot;lulu&quot;</span><br><span class="line">&#125;</span><br><span class="line">var fun1 = obj.fun.bind(obj2);  //绑定this新函数</span><br><span class="line">fun1(18, &quot;广州南沙&quot;);  //再次调用</span><br></pre></td></tr></table></figure><p>bind与apply&#x2F;call有不同，前者不会立即执行，是返回一个绑定this新函数，需要再次调用才最终执行，而后者是立即执行的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众所周知，函数中可以使用this关键字，它表示函数的上下文，那么上下文又是什么呢？&lt;br&gt;举个例子：多吃水果，这会对身体好。（那么”这”指的是多吃水果）。&lt;br&gt;回到我们的js函数里，可以这么理解，函数中的this具体指代什么东西，就需要通过调用函数时的上下文去判断了。&lt;b</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>AnimateCss和Swiper插件</title>
    <link href="https://luluminusone.github.io/2022/07/24/AnimateCss-Swiper/"/>
    <id>https://luluminusone.github.io/2022/07/24/AnimateCss-Swiper/</id>
    <published>2022-07-24T01:10:18.933Z</published>
    <updated>2022-07-26T05:44:44.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Animate-css"><a href="#关于Animate-css" class="headerlink" title="关于Animate.css"></a>关于Animate.css</h2><p>Animate.Css是一个开源的css动画库,这个动画库有在线演示，如果觉得哪个动画效果符合需求的话可以直接用，挺简单的。<br>网站在这： <a href="http://www.animate.net.cn/">Animate</a><br>操作步骤:<br>首先需要将Animate.css文件下载到电脑里面，下载地址：<a href="https://daneden.github.io/animate.css/">开源社区下载地址</a>，<a href="https://animate.style/">官方下载地址</a>。<br>然后在你所需的页面引入css文件即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;link rel=&quot;stylesheet&quot; href=&quot;animate.min.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>引入后，需要用该动画的元素添加类名就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">举个例子</span><br><span class="line">&lt;div class=&quot;animated fadeInUp&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="关于Swiper插件"><a href="#关于Swiper插件" class="headerlink" title="关于Swiper插件"></a>关于Swiper插件</h2><p>Swiper是一个开源、免费、强大的触摸滑动插件（官网这么说的~~）。<br>这个插件可以实现移动端和PC端的大部分滑动功能，果然是非常强大！！<br>这个插件的网址是：<a href="https://www.swiper.com.cn/">Swiper7</a>。<br>这个插件可以下载到本地引用其文件即可用，也可引用在线的文件去使用。<br>使用方法在这：<a href="https://www.swiper.com.cn/usage/index.html">使用方法</a>，我感觉我不用举例了，这里写得蛮详细的。<br>基础演示效果在这：<a href="https://www.swiper.com.cn/demo/index.html">基础演示</a>，大家根据自己想要的去调整代码就好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于Animate-css&quot;&gt;&lt;a href=&quot;#关于Animate-css&quot; class=&quot;headerlink&quot; title=&quot;关于Animate.css&quot;&gt;&lt;/a&gt;关于Animate.css&lt;/h2&gt;&lt;p&gt;Animate.Css是一个开源的css动画库,这个</summary>
      
    
    
    
    <category term="安利" scheme="https://luluminusone.github.io/categories/%E5%AE%89%E5%88%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>如何实现水平垂直居中</title>
    <link href="https://luluminusone.github.io/2022/07/23/buju/"/>
    <id>https://luluminusone.github.io/2022/07/23/buju/</id>
    <published>2022-07-23T02:15:33.216Z</published>
    <updated>2022-07-25T03:55:12.998Z</updated>
    
    <content type="html"><![CDATA[<p>对于如何实现元素的水平垂直居中有以下的几种实现方法，供学习。</p><h2 id="利用定位和margin-auto"><a href="#利用定位和margin-auto" class="headerlink" title="利用定位和margin:auto"></a>利用定位和margin:auto</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .father &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .son &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="利用定位和margin负值"><a href="#利用定位和margin负值" class="headerlink" title="利用定位和margin负值"></a>利用定位和margin负值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .father &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .son &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-top: -25px;</span><br><span class="line">    margin-left: -25px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="利用定位和CSS3属性"><a href="#利用定位和CSS3属性" class="headerlink" title="利用定位和CSS3属性"></a>利用定位和CSS3属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .father &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  .son &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%,-50%); //translate(x,y);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="利用flex布局"><a href="#利用flex布局" class="headerlink" title="利用flex布局"></a>利用flex布局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .father &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .son &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="利用grid布局"><a href="#利用grid布局" class="headerlink" title="利用grid布局"></a>利用grid布局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .father &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 300px;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    display: grid;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">  .son &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;father&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于如何实现元素的水平垂直居中有以下的几种实现方法，供学习。&lt;/p&gt;
&lt;h2 id=&quot;利用定位和margin-auto&quot;&gt;&lt;a href=&quot;#利用定位和margin-auto&quot; class=&quot;headerlink&quot; title=&quot;利用定位和margin:auto&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>轮播图的实现</title>
    <link href="https://luluminusone.github.io/2022/07/22/how-to-create-carousel-figure/"/>
    <id>https://luluminusone.github.io/2022/07/22/how-to-create-carousel-figure/</id>
    <published>2022-07-22T01:58:23.337Z</published>
    <updated>2022-07-25T02:33:18.458Z</updated>
    
    <content type="html"><![CDATA[<p>今天是写一下关于轮播图的实现思路以及代码。</p><h2 id="Html代码"><a href="#Html代码" class="headerlink" title="Html代码"></a>Html代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;banner&quot; id=&quot;banner&quot;&gt;</span><br><span class="line">    &lt;ul id=&quot;carousel_list&quot; class=&quot;carousel_list&quot;&gt;</span><br><span class="line">       &lt;li&gt;&lt;img src=&quot;images/beijing/0.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;&lt;img src=&quot;images/beijing/1.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;&lt;img src=&quot;images/beijing/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;&lt;img src=&quot;images/beijing/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li&gt;&lt;img src=&quot;images/beijing/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;a href=&quot;javascript:;&quot; class=&quot;leftbtn iconfont&quot; id=&quot;left_btn&quot;&gt;&amp;#xe659;&lt;/a&gt;      //引用图标</span><br><span class="line">    &lt;a href=&quot;javascript:;&quot; class=&quot;rightbtn iconfont&quot; id=&quot;right_btn&quot;&gt;&amp;#xe658;&lt;/a&gt;    //引用图标</span><br><span class="line">    &lt;ol class=&quot;circles&quot; id=&quot;circle_ol&quot;&gt;</span><br><span class="line">       &lt;li data-n=&quot;0&quot; class=&quot;current&quot;&gt;&lt;/li&gt;  //给current类名，后续用js实现点击某个小圆点变换颜色和图片</span><br><span class="line">       &lt;li data-n=&quot;1&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li data-n=&quot;2&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li data-n=&quot;3&quot;&gt;&lt;/li&gt;</span><br><span class="line">       &lt;li data-n=&quot;4&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">PS:后面代码看不清的话可以鼠标左键点击一下代码区，用键盘的左右方向键滑动一下即可看到。</span><br></pre></td></tr></table></figure><p>简单剖析一下html的布局，首先，要实现轮播图，我们可以定义一个div盒子，里面包裹着走马灯轮播图、左右切换轮播图的按钮和点击轮播图用的小圆点。<br>逐个进行分析，对于走马灯区域我们会想到用一个无序列表去装我们的轮播图片，当然您也可以用一个div盒子里面包裹着span标签去装轮播图，以上只是我自己的一个实现方式。<br>对于左右切换的按钮我们直接用 <font color="red">a</font> 标签即可,还有我这里用了阿里巴巴的图标库，在CSS代码最上的那片代码是引用代码，有想了解如何引用iconfont图标的可以点这里<a href="https://www.iconfont.cn/">iconfont</a>。<br>最后是点击某个小圆点能切换到对应的轮播图的实现，其实现方式可以用一个有序列表去实现，就如上面代码一样。<br>这样html的布局就完成了。其实你有更好的想法也可按你自己的去写，怎么喜欢怎么来，轮播图实现有很多种方式。</p><h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">            font-family: &#x27;iconfont&#x27;;</span><br><span class="line">            src: url(&#x27;./icon/iconfont.woff2?t=1658476720236&#x27;) format(&#x27;woff2&#x27;),</span><br><span class="line">            url(&#x27;./icon/iconfont.woff?t=1658476720236&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">            url(&#x27;./icon/iconfont.ttf?t=1658476720236&#x27;) format(&#x27;truetype&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        .iconfont &#123;</span><br><span class="line">            font-family: &quot;iconfont&quot; !important;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-style: normal;</span><br><span class="line">            -webkit-font-smoothing: antialiased;</span><br><span class="line">            -moz-osx-font-smoothing: grayscale;</span><br><span class="line">        &#125;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        .banner &#123;</span><br><span class="line">            width: 650px;</span><br><span class="line">            height: 360px;</span><br><span class="line">            border: 1px solid #000;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">            position: relative;</span><br><span class="line">            overflow: hidden;             //浮动起来的图片隐藏</span><br><span class="line">        &#125;</span><br><span class="line">        .banner ul &#123;</span><br><span class="line">            display: flex;                //flex布局实现浮动</span><br><span class="line">            list-style: none;</span><br><span class="line">            width: 100%;</span><br><span class="line">            position: relative;</span><br><span class="line">            left: 0;</span><br><span class="line">            transition: left .5s ease 0s; //轮播图过渡效果</span><br><span class="line">        &#125;</span><br><span class="line">        .banner .leftbtn &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 20px;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-top: -15px;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        .banner .rightbtn &#123;</span><br><span class="line">            text-decoration: none;         //去掉下划线</span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 20px;</span><br><span class="line">            top: 50%;</span><br><span class="line">            font-size: 40px;</span><br><span class="line">            margin-top: -15px;</span><br><span class="line">        &#125;</span><br><span class="line">        .banner .circles &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            display: flex;                 //flex布局实现浮动</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translateX(-50%);   //css3实现居中的写法</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            margin-top: -30px;</span><br><span class="line">        &#125;</span><br><span class="line">        .banner .circles li &#123;</span><br><span class="line">            width: 20px;</span><br><span class="line">            height: 20px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        .banner .circles li:last-child &#123;</span><br><span class="line">            margin-right: 0;             //最后一个小圆点取消margin-right</span><br><span class="line">        &#125;</span><br><span class="line">        .banner .circles .current &#123;</span><br><span class="line">            background-color: purple;    //点击某个小圆点会变色</span><br><span class="line">        &#125;</span><br><span class="line">PS:后面代码看不清的话可以鼠标左键点击一下代码区，用键盘的左右方向键滑动一下即可看到。</span><br></pre></td></tr></table></figure><p>样式的话就按自己喜欢的来设定就好了，定位这些子绝父相大家应该都挺熟的，图片浮动和小圆点浮动我用了flex布局的一些知识，位置居中可用left: 50%,margin-left: -自身width的一半去实现水平居中，上下居中同理。<br>上面有一些代码我也用了css3的属性去实现位置的居中。</p><h2 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码"></a>JS代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> //获取元素</span><br><span class="line"> const banner = document.getElementById(&#x27;banner&#x27;);</span><br><span class="line"> const carousel_list = document.getElementById(&#x27;carousel_list&#x27;);</span><br><span class="line"> const left_btn = document.getElementById(&#x27;left_btn&#x27;);</span><br><span class="line"> const right_btn = document.getElementById(&#x27;right_btn&#x27;);</span><br><span class="line"> const circle_ol = document.getElementById(&#x27;circle_ol&#x27;);</span><br><span class="line"> const circle_lis = circle_ol.getElementsByTagName(&#x27;li&#x27;);</span><br><span class="line"> </span><br><span class="line"> const clone_li = carousel_list.firstElementChild.cloneNode(true);   //克隆第一个li</span><br><span class="line"> carousel_list.appendChild(clone_li);      //上树</span><br><span class="line"> let idx = 0;                              //当前显示图片序号</span><br><span class="line"> let lock = true;                          //定义节流锁</span><br><span class="line"> </span><br><span class="line"> right_btn.onclick = function () &#123;         //右按钮事件监听</span><br><span class="line">     if (!lock) return;                    //判断节流锁状态</span><br><span class="line">     lock = false;                         //关锁</span><br><span class="line">     carousel_list.style.transition = &#x27;transform .5s ease 0s&#x27;;    //过渡</span><br><span class="line">     idx++;                                //idx + 1</span><br><span class="line">     carousel_list.style.transform = &#x27;translateX(&#x27; + -100 * idx + &#x27;%)&#x27;;   //拉动图片</span><br><span class="line">     if (idx &gt; 4) &#123;                        //判断图片是否最后一张，是则需瞬间移动到第一张</span><br><span class="line">         setTimeout(function () &#123;</span><br><span class="line">             carousel_list.style.transition = &#x27;none&#x27;;      //去掉过渡</span><br><span class="line">             carousel_list.style.transform = &#x27;none&#x27;;       //删除transform</span><br><span class="line">             idx = 0;                       //图片序号变为0</span><br><span class="line">         &#125;, 500);</span><br><span class="line">     &#125;</span><br><span class="line">     setCircles();                          //调用小圆点</span><br><span class="line">     setTimeout(function () &#123;               //动画结束后开锁</span><br><span class="line">         lock = true;</span><br><span class="line">     &#125;, 500);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> left_btn.onclick = function () &#123;           //左按钮事件监听</span><br><span class="line">     if (!lock) return;                     //判断节流锁状态</span><br><span class="line">     lock = false;                          //关锁</span><br><span class="line">     if (idx === 0) &#123;                       //判断图片是否为第一张，是则需瞬间移动到最后一张</span><br><span class="line">         carousel_list.style.transition = &#x27;none&#x27;;   //取消过渡</span><br><span class="line">         carousel_list.style.transform = &#x27;translateX(&#x27; + -100 * 5 + &#x27;%)&#x27;;  //拉到最后（瞬间移动）</span><br><span class="line">         idx = 4;                           //图片序号变为4</span><br><span class="line">         setTimeout(function () &#123;           //0毫秒延时器，将瞬移后的过渡属性加上</span><br><span class="line">             carousel_list.style.transition = &#x27;transform .5s ease 0s&#x27;;     //加上过渡</span><br><span class="line">             carousel_list.style.transform = &#x27;translateX(&#x27; + -100 * 4 + &#x27;%)&#x27;;</span><br><span class="line">         &#125;, 0);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         idx--;</span><br><span class="line">         carousel_list.style.transform = &#x27;translateX(&#x27; + -100 * idx + &#x27;%)&#x27;; //拉动图片</span><br><span class="line">     &#125;</span><br><span class="line">     setCircles();                          //调用小圆点</span><br><span class="line">     setTimeout(function () &#123;               //动画结束后开锁</span><br><span class="line">         lock = true;</span><br><span class="line">     &#125;, 500);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> function setCircles() &#123;</span><br><span class="line">     for (let i = 0; i &lt;= 4; i++) &#123;         //遍历小圆点</span><br><span class="line">         if (i === idx % 5) &#123;               //判断i是否等于idx，是则加上&#x27;current&#x27;类名</span><br><span class="line">             circle_lis[i].className = &#x27;current&#x27;;</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             circle_lis[i].className = &#x27;&#x27;;  //类名为空</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> circle_ol.onclick = function (e) &#123;         //事件委托，小圆点的监听</span><br><span class="line">     if (e.target.tagName.toLowerCase() === &#x27;li&#x27;) &#123;</span><br><span class="line">         let n = Number(e.target.getAttribute(&#x27;data-n&#x27;));  //得到li身上的data-n属性</span><br><span class="line">         idx = n;                           //改变idx</span><br><span class="line">         carousel_list.style.transition = &#x27;transform .5s ease 0s&#x27;;  //过渡</span><br><span class="line">         carousel_list.style.transform = &#x27;translateX(&#x27; + -100 * idx + &#x27;%)&#x27;;  //拉动图片</span><br><span class="line">         setCircles();                      调用小圆点</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> let timer = setInterval(right_btn_handler, 2000);  //定时器，自动轮播</span><br><span class="line"> banner.onmouseenter = function () &#123;                //鼠标进入暂停自动轮播</span><br><span class="line">     clearInterval(timer);</span><br><span class="line"> &#125;</span><br><span class="line"> banner.onmouseleave = function () &#123;                //鼠标离开开始自动轮播</span><br><span class="line">     clearInterval(timer);                          //设表先关</span><br><span class="line">     timer = setInterval(right_btn_handler, 2000);  </span><br><span class="line"> &#125;</span><br><span class="line">PS:后面代码看不清的话可以鼠标左键点击一下代码区，用键盘的左右方向键滑动一下即可看到。</span><br></pre></td></tr></table></figure><p>获取dom元素，左右按钮点击事件的监听，小圆点按钮点击事件监听，自动轮播和暂停轮播，在代码区中有注释如何实现，供参考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是写一下关于轮播图的实现思路以及代码。&lt;/p&gt;
&lt;h2 id=&quot;Html代码&quot;&gt;&lt;a href=&quot;#Html代码&quot; class=&quot;headerlink&quot; title=&quot;Html代码&quot;&gt;&lt;/a&gt;Html代码&lt;/h2&gt;&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>git常用指令</title>
    <link href="https://luluminusone.github.io/2022/07/21/git-command/"/>
    <id>https://luluminusone.github.io/2022/07/21/git-command/</id>
    <published>2022-07-21T07:48:38.109Z</published>
    <updated>2022-07-21T08:51:28.615Z</updated>
    
    <content type="html"><![CDATA[<p>用于记录git常用的指令</p><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><h2 id="使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息"><a href="#使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息" class="headerlink" title="使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息"></a>使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend -m [message]</span><br></pre></td></tr></table></figure><blockquote><p><font color="black">这个方法可以用来修改上次commit的备注信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend </span><br></pre></td></tr></table></figure><p>进入编辑模式，可将需要修改commit的记录的pick修改成edit，编辑好之后使用:wq保存退出。<br>然后使用以下命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>进入编辑模式编辑commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h2 id="列出所有本地分支和远程分支"><a href="#列出所有本地分支和远程分支" class="headerlink" title="列出所有本地分支和远程分支"></a>列出所有本地分支和远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，但依然停留在当前分支"><a href="#新建一个分支，但依然停留在当前分支" class="headerlink" title="新建一个分支，但依然停留在当前分支"></a>新建一个分支，但依然停留在当前分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [branch-name]</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，指向指定commit"><a href="#新建一个分支，指向指定commit" class="headerlink" title="新建一个分支，指向指定commit"></a>新建一个分支，指向指定commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [branch] [commit]</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，与指定的远程分支建立追踪关系"><a href="#新建一个分支，与指定的远程分支建立追踪关系" class="headerlink" title="新建一个分支，与指定的远程分支建立追踪关系"></a>新建一个分支，与指定的远程分支建立追踪关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure><h2 id="选择一个commit，合并进当前分支"><a href="#选择一个commit，合并进当前分支" class="headerlink" title="选择一个commit，合并进当前分支"></a>选择一个commit，合并进当前分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick [commit]</span><br></pre></td></tr></table></figure><h2 id="删除分支-删除本地分支"><a href="#删除分支-删除本地分支" class="headerlink" title="删除分支(删除本地分支)"></a>删除分支(删除本地分支)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line"></span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h2 id="新建一个tag在当前commit"><a href="#新建一个tag在当前commit" class="headerlink" title="新建一个tag在当前commit"></a>新建一个tag在当前commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag [tag]</span><br></pre></td></tr></table></figure><h2 id="新建一个tag在指定commit"><a href="#新建一个tag在指定commit" class="headerlink" title="新建一个tag在指定commit"></a>新建一个tag在指定commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag [tag] [commit]</span><br></pre></td></tr></table></figure><h2 id="删除本地tag"><a href="#删除本地tag" class="headerlink" title="删除本地tag"></a>删除本地tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d [tag]</span><br></pre></td></tr></table></figure><h2 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/[tagName]</span><br></pre></td></tr></table></figure><h2 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看tag信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show [tag]</span><br></pre></td></tr></table></figure><h2 id="提交指定tag"><a href="#提交指定tag" class="headerlink" title="提交指定tag"></a>提交指定tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] [tag]</span><br></pre></td></tr></table></figure><h2 id="提交所有tag"><a href="#提交所有tag" class="headerlink" title="提交所有tag"></a>提交所有tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] --tags</span><br></pre></td></tr></table></figure><h2 id="新建一个分支，指向某个tag"><a href="#新建一个分支，指向某个tag" class="headerlink" title="新建一个分支，指向某个tag"></a>新建一个分支，指向某个tag</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><h2 id="显示commit历史，以及每次commit发生变更的文件"><a href="#显示commit历史，以及每次commit发生变更的文件" class="headerlink" title="显示commit历史，以及每次commit发生变更的文件"></a>显示commit历史，以及每次commit发生变更的文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --stat</span><br></pre></td></tr></table></figure><h2 id="搜索提交历史，根据关键词"><a href="#搜索提交历史，根据关键词" class="headerlink" title="搜索提交历史，根据关键词"></a>搜索提交历史，根据关键词</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -S [keyword]</span><br></pre></td></tr></table></figure><h2 id="显示所有提交过的用户，按提交次数排序"><a href="#显示所有提交过的用户，按提交次数排序" class="headerlink" title="显示所有提交过的用户，按提交次数排序"></a>显示所有提交过的用户，按提交次数排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git shortlog -sn</span><br></pre></td></tr></table></figure><h2 id="显示暂存区和工作区的差异"><a href="#显示暂存区和工作区的差异" class="headerlink" title="显示暂存区和工作区的差异"></a>显示暂存区和工作区的差异</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h2 id="显示暂存区和上一个commit的差异"><a href="#显示暂存区和上一个commit的差异" class="headerlink" title="显示暂存区和上一个commit的差异"></a>显示暂存区和上一个commit的差异</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached [file]</span><br></pre></td></tr></table></figure><h2 id="显示工作区与当前分支最新commit之间的差异"><a href="#显示工作区与当前分支最新commit之间的差异" class="headerlink" title="显示工作区与当前分支最新commit之间的差异"></a>显示工作区与当前分支最新commit之间的差异</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><h2 id="下载远程仓库的所有变动"><a href="#下载远程仓库的所有变动" class="headerlink" title="下载远程仓库的所有变动"></a>下载远程仓库的所有变动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote]</span><br></pre></td></tr></table></figure><h2 id="推送所有分支到远程仓库"><a href="#推送所有分支到远程仓库" class="headerlink" title="推送所有分支到远程仓库"></a>推送所有分支到远程仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><h2 id="恢复暂存区的指定文件到工作区"><a href="#恢复暂存区的指定文件到工作区" class="headerlink" title="恢复暂存区的指定文件到工作区"></a>恢复暂存区的指定文件到工作区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [file]</span><br></pre></td></tr></table></figure><h2 id="恢复某个commit的指定文件到暂存区和工作区"><a href="#恢复某个commit的指定文件到暂存区和工作区" class="headerlink" title="恢复某个commit的指定文件到暂存区和工作区"></a>恢复某个commit的指定文件到暂存区和工作区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [commit] [file]</span><br></pre></td></tr></table></figure><h2 id="恢复暂存区的所有文件到工作区"><a href="#恢复暂存区的所有文件到工作区" class="headerlink" title="恢复暂存区的所有文件到工作区"></a>恢复暂存区的所有文件到工作区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout</span><br></pre></td></tr></table></figure><h2 id="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"><a href="#重置暂存区的指定文件，与上一次commit保持一致，但工作区不变" class="headerlink" title="重置暂存区的指定文件，与上一次commit保持一致，但工作区不变"></a>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [file]</span><br></pre></td></tr></table></figure><h2 id="重置暂存区与工作区，与上一次commit保持一致"><a href="#重置暂存区与工作区，与上一次commit保持一致" class="headerlink" title="重置暂存区与工作区，与上一次commit保持一致"></a>重置暂存区与工作区，与上一次commit保持一致</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><h2 id="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"><a href="#重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变" class="headerlink" title="重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变"></a>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [commit]</span><br></pre></td></tr></table></figure><h2 id="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"><a href="#重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致" class="headerlink" title="重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致"></a>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard [commit]</span><br></pre></td></tr></table></figure><h2 id="重置当前HEAD为指定commit，但保持暂存区和工作区不变"><a href="#重置当前HEAD为指定commit，但保持暂存区和工作区不变" class="headerlink" title="重置当前HEAD为指定commit，但保持暂存区和工作区不变"></a>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --keep [commit]</span><br></pre></td></tr></table></figure><h2 id="新建一个commit，用来撤销指定commit"><a href="#新建一个commit，用来撤销指定commit" class="headerlink" title="新建一个commit，用来撤销指定commit"></a>新建一个commit，用来撤销指定commit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ $ git revert [commit]</span><br></pre></td></tr></table></figure><h2 id="暂时将未提交的变化移除，稍后再移入"><a href="#暂时将未提交的变化移除，稍后再移入" class="headerlink" title="暂时将未提交的变化移除，稍后再移入"></a>暂时将未提交的变化移除，稍后再移入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h2 id="生成一个可供发布的压缩包"><a href="#生成一个可供发布的压缩包" class="headerlink" title="生成一个可供发布的压缩包"></a>生成一个可供发布的压缩包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用于记录git常用的指令&lt;/p&gt;
&lt;h2 id=&quot;代码提交&quot;&gt;&lt;a href=&quot;#代码提交&quot; class=&quot;headerlink&quot; title=&quot;代码提交&quot;&gt;&lt;/a&gt;代码提交&lt;/h2&gt;&lt;h2 id=&quot;使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>前端入门之路</title>
    <link href="https://luluminusone.github.io/2022/07/21/Web-Software-Engineer-begin/"/>
    <id>https://luluminusone.github.io/2022/07/21/Web-Software-Engineer-begin/</id>
    <published>2022-07-21T02:19:06.355Z</published>
    <updated>2022-07-21T06:37:41.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="html-超文本标记语言"><a href="#html-超文本标记语言" class="headerlink" title="html(超文本标记语言)"></a>html(超文本标记语言)</h2><p>菜鸟教程: <a href="https://www.runoob.com/html/html-tutorial.html">https://www.runoob.com/html/html-tutorial.html</a><br>MDN教程: <a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started">https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started</a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>css基础语法: <a href="https://www.w3school.com.cn/css/css_syntax.asp">w3c css 基础语法</a><br>css进阶语法-scss: <a href="http://www.sass.hk/">http://www.sass.hk/</a></p><h2 id="JS-javascript"><a href="#JS-javascript" class="headerlink" title="JS(javascript)"></a>JS(javascript)</h2><p>ES5基础语法: <a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a><br>ES6基础语法: <a href="https://es6.ruanyifeng.com/">阮一峰ES6教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">熟悉ES5再学习</span><br></pre></td></tr></table></figure><p>js进阶语法-typescript: <a href="https://www.tslang.cn/docs/home.html">https://www.tslang.cn/docs/home.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">熟悉ES6基础再作研究</span><br></pre></td></tr></table></figure><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p>vuejs(2.x): <a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a><br>vuejs(3.x): <a href="https://v3.cn.vuejs.org/guide/introduction.html">https://v3.cn.vuejs.org/guide/introduction.html</a><br>vue-router: vue路由管理工具 <a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a><br>vue脚手架工具: <a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a> 用这个工具可以直接创建vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue脚手架已经集成了wepack、less、scss、vue-router、vuex等依赖包，前期用</span><br><span class="line">vue-cli创建项目即可开发，开箱即用，等熟悉了再一一研究以上开发工具</span><br></pre></td></tr></table></figure><h2 id="前端工程开发"><a href="#前端工程开发" class="headerlink" title="前端工程开发"></a>前端工程开发</h2><h3 id="依赖包管理"><a href="#依赖包管理" class="headerlink" title="依赖包管理"></a>依赖包管理</h3><p>npm前端开发依赖包管理工具: <a href="https://www.npmjs.cn/">https://www.npmjs.cn/</a><br>node.js下载网址: <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h2 id="项目打包工具"><a href="#项目打包工具" class="headerlink" title="项目打包工具"></a>项目打包工具</h2><p>webpack <a href="https://webpack.docschina.org/concepts/">https://webpack.docschina.org/concepts/</a> 前期用vue脚手架开发项目即可，熟悉用法后再深入研究</p><h2 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h2><p>git，廖雪峰教程: <a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>github代码仓库: <a href="https://github.com/">https://github.com/</a><br>gitee代码仓库（码云）: <a href="https://gitee.com/">https://gitee.com/</a></p><h2 id="以上为学习资料"><a href="#以上为学习资料" class="headerlink" title="以上为学习资料"></a>以上为学习资料</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;h2 id=&quot;html-超文本标记语言&quot;&gt;&lt;a href=&quot;#html-超文本标记语言&quot; class=&quot;headerlink&quot; title=&quot;h</summary>
      
    
    
    
    <category term="编程" scheme="https://luluminusone.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>如何用Hexo和GitHub Page搭建个人blog</title>
    <link href="https://luluminusone.github.io/2022/07/20/how-to-create-blog/"/>
    <id>https://luluminusone.github.io/2022/07/20/how-to-create-blog/</id>
    <published>2022-07-20T02:23:21.071Z</published>
    <updated>2022-07-21T06:37:06.999Z</updated>
    
    <content type="html"><![CDATA[<p>其实写这篇文章缘由是在于对想搭建博客的兄弟姐妹们的一个保姆级教程，hexo是一个容易上手，零成本，搭建操作较简单的工具。</p><p>用hexo来搭博客是使用markdown文件来解析，json进行数据存储，不需要数据库去存储数据，文档比较完善，其官方插件较多，可以满足大部分需求，开发过程较轻松，坑不多，建议用hexo来搭博客，今天就把用hexo搭博客的教程呈上，大家一起来动手吧！</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>首先你需要安装好Node，hexo需要用到Node的NPM工具，如果没有安装过Node.js的可以去<a href="https://nodejs.org/zh-cn/">Node官网</a>下载,安装完了用cmd命令查看Node版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果出现一下信息，说明安装成功（版本号可以不一致，建议安装最新稳定版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v12.22.9</span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>当你安装完Node.js之后，还需安装<a href="https://git-scm.com/">Git</a>，完事之后可用cmd命令查看Git的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br></pre></td></tr></table></figure><p>如果出现一下信息，说明安装成功（版本号可以不一致，建议安装最新稳定版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version 2.37.1.window.1</span><br></pre></td></tr></table></figure><h2 id="安装Hexo脚手架工具"><a href="#安装Hexo脚手架工具" class="headerlink" title="安装Hexo脚手架工具"></a>安装Hexo脚手架工具</h2><p>如果Git跟Node.js都安装完成后，即可开始！<br>首先，在cmd输入一下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="建立自己的博客"><a href="#建立自己的博客" class="headerlink" title="建立自己的博客"></a>建立自己的博客</h2><p>选自己喜欢的盘创建一个空白文件夹， 输入以下命令自动生成Hexo博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>部署完成后可在目录看到一下文件</p><ul><li>_config.yml #博客配置文件</li><li>package.json #模块和依赖项</li><li>scaffolds</li><li>source #文章</li><li>_drafts #草稿目录</li><li>_posts #发布的文章目录</li><li>themes #主题</li></ul><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><blockquote><p><font color=#000>#Hexo Configuration<br><font color=#000>##Docs: <a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a><br><font color=#000>##Source: <a href="https://github.com/hexojs/hexo/">https://github.com/hexojs/hexo/</a></p></blockquote><blockquote><p><font color=#000>#Siite<br><font color=#000>title: <font color=orange>网站标题如：lulu-blog<br><font color=#000>subtitle: <font color=orange>网站副标题：lulu<br><font color=#000>description: <font color=orange>网站描述： blog for tech<br><font color=#000>author: <font color=orange>网站作者：lulu<br><font color=#000>language: <font color=orange>网站的语言<br><font color=#000>timezone:   <font color=orange>网站的时间区，默认使用的是电脑的时区<br><font color=#000>#URL</font><br><font color=#000>##If your site is put in a subdirectory, set url as <code>http://yoursite.com/child</code> and root as ‘&#x2F;child&#x2F;‘<br><font color=#000>url: 网站地址：<a href="https://github.com/luluminusone.github.io.git">https://github.com/luluminusone.github.io.git</a><br><font color=#000>root: 网站根目录,建议是用’&#x2F;‘</font><br><font color=#000>permalink: 文章的永久链接格式，默认就好 :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;<br><font color=#000>permalink_defaults: 永久链接中各部分的默认值，不用填</p><p><font color=#000>#Directory</font><br><font color=#000>source_dir: 资源文件夹，存放文章用的：source<br><font color=#000>public_dir: 公共文件夹，用来存放编译之后的文件：public<br><font color=#000>tag_dir: 标签文件夹：tags</font><br><font color=#000>archive_dir: 归档文件夹，也就是你的全部文章生成的目录：archives<br><font color=#000>category_dir: 分类文件夹：categories<br><font color=#000>code_dir: Include code文件夹：downloads&#x2F;code<br><font color=#000>i18n_dir: 国际化（i18n）文件夹:lang<br><font color=#000>skip_render: 需要跳过渲染的文件存放的文件夹</p><p><font color=#000>#Writing</font><br><font color=#000>new_post_name: :<font color=orange>title.md <font color=#000># File name of new posts<br><font color=#000>default_layout: 默认文章样式：post<br><font color=#000>titlecase: <font color=orange>false <font color=#000># Transform title into titlecase<br><font color=#000>external_link: <font color=orange>true <font color=#000># Open external links in new tab<br><font color=#000>filename_case: 0<br><font color=#000>render_drafts: <font color=orange>false<br><font color=#000>post_asset_folder: <font color=orange>false<br><font color=#000>relative_link: <font color=orange>false<br><font color=#000>future: <font color=orange>true<br><font color=#000>highlight:<br><font color=#000>enable: <font color=orange>true<br><font color=#000>line_number: <font color=orange>true<br><font color=#000>auto_detect: <font color=orange>false<br><font color=#000>tab_replace:</p><p><font color=#000>#Home page setting</font><br><font color=#000>#path: Root path for your blogs index page. (default &#x3D; ‘’)<br><font color=#000>#per_page: Posts displayed per page. (0 &#x3D; disable pagination)<br><font color=#000>#order_by: Posts order. (Order by date descending by default)<br><font color=#000>index_generator:<br><font color=#000>path: ‘’<br><font color=#000>per_page: <font color=orange>每一页显示的文章：10<br><font color=#000>order_by: -date</p><p><font color=#000>#Category &amp; Tag<br><font color=#000>default_category: <font color=orange>uncategorized<br><font color=#000>category_map:<br><font color=#000>tag_map:</p><p><font color=#000>#Date &#x2F; Time format<br><font color=#000>##Hexo uses Moment.js to parse and display date<br><font color=#000>##You can customize the date format as defined in<br><font color=#000>##<code>http://momentjs.com/docs/#/displaying/format/</code><br><font color=#000>date_format: <font color=orange>YYYY-MM-DD<br><font color=#000>time_format: HH:mm:ss</p><p><font color=#000>#Pagination<br><font color=#000>##Set per_page to 0 to disable pagination<br><font color=#000>per_page: <font color=orange>10<br><font color=#000>pagination_dir: page</p><p><font color=#000>#Extensions<br><font color=#000>##Plugins: <code>https://hexo.io/plugins/</code><br><font color=#000>##Themes: <code>https://hexo.io/themes/</code><br><font color=#000>theme: <font color=orange>主题：flex-block</p><p><font color=#000>#Deployment<br><font color=#000>##Docs: <code>https://hexo.io/docs/deployment.html</code><br><font color=#000>deploy:<br><font color=#000>type: git<br><font color=#000>repo: <code>https://github.com/luluminusone/luluminusone.github.io.git</code><br><font color=#000>branch: master</p></blockquote><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>说完配置文件，就要说一下写作的技巧，使用cmd命令创建一篇文章（当然，你也可以在你自己的编辑器里面，找到source&#x2F;_post&#x2F;这个文件夹去创建md文件用于编写文章）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&#x27;我的第一篇文章&#x27;</span></span><br></pre></td></tr></table></figure><p>以上是用命令行去创建的，用编辑器创建的就不用教了吧，鼠标右键创建即可。</p><p>hexo还有一个文件夹是草稿文件夹_draft，可以用理解成私密文章的功能，只要有不想显示的文章但是又不想删除，就可以把文章拖进去_draft文件夹就可以实现隐藏的功能了，也可以用hexo的命令将文章放到草稿文件夹。</p><h2 id="编译文章"><a href="#编译文章" class="headerlink" title="编译文章"></a>编译文章</h2><p>当我们写好文章的时候，需要预览的话，在编辑器的terminal或者cmd命令编写以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g  或者  hexo generate(二选一)</span><br></pre></td></tr></table></figure><h2 id="预览文章"><a href="#预览文章" class="headerlink" title="预览文章"></a>预览文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s  或者  hexo server（二选一）</span><br></pre></td></tr></table></figure><p>如果需要预览draft文件夹下面的文件，需要在后面加上–draft参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --draft</span><br></pre></td></tr></table></figure><h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>当写完文章时，需要对文章编译后上传，部署到GitHub仓库里，我们需要注册一个GitHub账号，建议科学上网去注册，不然太慢了，如果GitHub注册问题无法解决，可以使用国内的<a href="https://gitee.com/">码云</a>注册一个仓库，其实相当于国内的GitHub你可以这么理解。<br>在码云创建好仓库之后，将仓库的SSH后面的地址复制到_config.yml文件里，找到以下这个地方，修改一下</p><blockquote><p><font color=#000>#Deployment<br><font color=#000>##Docs: <code>https://hexo.io/docs/deployment.html</code><br><font color=#000>deploy:<br><font color=#000>type: git<br><font color=#000>repo: 这里填写为刚复制仓库的SSH地址<br><font color=#000>branch: master</p></blockquote><p>哦对了，对于如何生成SSH公钥我把码云公钥教程也放这里吧，大家不要着急，一步一步来搭建博客不难的。<a href="https://gitee.com/help/articles/4181">SSH公钥教程</a>,码云写的教程还是比较详细的。</p><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><p>到了上传项目这一步了，我们需要用到hexo的GitHub插件<font color="orange">hexo-deployer-git</font>,首先cmd命令去下载这个插件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就到了万众瞩目的一步了，输入以下cmd命令即可上传项目了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure><h2 id="完成项目！！！大家辛苦了"><a href="#完成项目！！！大家辛苦了" class="headerlink" title="完成项目！！！大家辛苦了"></a>完成项目！！！大家辛苦了</h2><h2 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h2><p>刚生成的项目主题应该是有很多人不太喜欢的，这里放一个hexo主题网站，大家在里面选自己喜欢的主题，然后可以在GitHub或者码云上clone主题到themes这个文件夹里，网站在这<a href="https://hexo.io/themes/">主题</a>。<br>git克隆的指令如下,可以在用cmd命令，也可用git bash here。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</span><br><span class="line">记住，上述指令git <span class="built_in">clone</span>和网址后的.git themes/(这里是起文件夹名，英文就好，可随便起)</span><br><span class="line">是必须要有的，中间的是网址，找到你自己喜欢的主题，在github或码云上搜，然后将搜到的主</span><br><span class="line">题仓库网址复制即可到中间即可，纯手打也行。</span><br></pre></td></tr></table></figure><p>克隆完成后，在_config.yml文件，找到theme: landscape将他改成你克隆主题的文件夹名字即可，例如一上面为例，改成theme: indigo<br>这里就OK了，然后运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这样就大功告成，如果有些主题部署报错，那就换一个吧，别纠结了，当然，如果有能力会改错修改bug也可以成功用到报错的主题，以上！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;其实写这篇文章缘由是在于对想搭建博客的兄弟姐妹们的一个保姆级教程，hexo是一个容易上手，零成本，搭建操作较简单的工具。&lt;/p&gt;
&lt;p&gt;用hexo来搭博客是使用markdown文件来解析，json进行数据存储，不需要数据库去存储数据，文档比较完善，其官方插件较多，可以满足大</summary>
      
    
    
    
    <category term="搭建" scheme="https://luluminusone.github.io/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Lulu blog for tec</title>
    <link href="https://luluminusone.github.io/2022/07/19/hello-my-blog/"/>
    <id>https://luluminusone.github.io/2022/07/19/hello-my-blog/</id>
    <published>2022-07-19T08:13:28.392Z</published>
    <updated>2022-07-21T06:38:08.786Z</updated>
    
    <content type="html"><![CDATA[<p>记录自己的成长之路，学无止境</p><p>其实写blog是对自己在前端学习路上的一个小帮手，因为前端知识很多很多，也算是总结学习成果，加油吧！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录自己的成长之路，学无止境&lt;/p&gt;
&lt;p&gt;其实写blog是对自己在前端学习路上的一个小帮手，因为前端知识很多很多，也算是总结学习成果，加油吧！！！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="有感" scheme="https://luluminusone.github.io/categories/%E6%9C%89%E6%84%9F/"/>
    
    
  </entry>
  
</feed>
